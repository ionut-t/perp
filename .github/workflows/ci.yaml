name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run benchmarks
        run: |
          go test -bench=. -benchmem -run=^$ ./... | tee benchmark_results.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark_results.txt

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest

  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, lint]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for git commands
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          
      - name: Set release version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          
      - name: Build binaries
        run: |
          mkdir -p dist
          
          # Get commit hash
          COMMIT=$(git rev-parse --short HEAD)
          # Get current date
          BUILD_DATE=$(date -u +%d/%m/%Y)
          # Define build flags
          LDFLAGS="-X 'github.com/ionut-t/perp/cmd.version=${{ env.VERSION }}' -X 'github.com/ionut-t/perp/cmd.commit=$COMMIT' -X 'github.com/ionut-t/perp/cmd.date=$BUILD_DATE'"
          
          # Build for macOS (Apple Silicon)
          GOOS=darwin GOARCH=arm64 go build -ldflags="$LDFLAGS" -o dist/perp-darwin-arm64

          # Build for macOS (Intel)
          GOOS=darwin GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/perp-darwin-amd64
                    
          # Build for Linux (64-bit)
          GOOS=linux GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/perp-linux-amd64
          
          # Build for Windows (64-bit)
          GOOS=windows GOARCH=amd64 go build -ldflags="$LDFLAGS" -o dist/perp-windows-amd64.exe
          
          # Make binaries executable
          chmod +x dist/*
          
          # Create checksums
          cd dist
          sha256sum * > checksums.txt
          cd ..
      
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: ${{ contains(env.VERSION, 'alpha') || contains(env.VERSION, 'beta') || contains(env.VERSION, 'rc') }}
          files: |
            dist/*
          body: |
            # perp ${{ env.VERSION }}
            
            ## What's New
            
            <!-- Add release notes here -->
            
            ## Installation

            ### macOS (Apple Silicon)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ env.VERSION }}/perp-darwin-arm64 -o perp && chmod +x perp
            ```
            
            ### macOS (Intel)
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ env.VERSION }}/perp-darwin-amd64 -o perp && chmod +x perp
            ```
            
            ### Linux
            ```bash
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ env.VERSION }}/perp-linux-amd64 -o perp && chmod +x perp
            ```

            ### For macOS and Linux
            ```bash
            sudo mv perp /usr/local/bin/
            # or
            mkdir -p ~/bin && mv perp ~/bin/ && echo 'export PATH="$HOME/bin:$PATH"' >> ~/.zshrc
            source ~/.zshrc
            ```
            
            ### Windows
            Download the binary from the assets below.